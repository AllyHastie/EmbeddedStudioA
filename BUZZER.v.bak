// Music demo verilog file
// (c) fpga4fun.com 2003-2015

// Plays a little tune on a speaker
// Use a 25MHz clock if possible (other frequencies will 
// change the pitch/speed of the song)

/////////////////////////////////////////////////////
module BUZZER(
	input clk,
	output reg speaker
);

reg [31:0] tone;
always @(posedge clk) tone <= tone+32'd1;

wire [7:0] fullnote;
music_ROM get_fullnote(.clk(clk), .address(tone[29:22]), .note(fullnote));

wire [2:0] octave;
wire [3:0] note;
divide_by12 get_octave_and_note(.numerator(fullnote[5:0]), .quotient(octave), .remainder(note));

reg [9:0] clkdivider;
always @*
case(note)
	 0: clkdivider = 10'd1023;//A
	 1: clkdivider = 10'd965;// A#/Bb
	 2: clkdivider = 10'd911;//B
	 3: clkdivider = 10'd861;//C
	 4: clkdivider = 10'd811;// C#/Db
	 5: clkdivider = 10'd767;//D
	 6: clkdivider = 10'd723;// D#/Eb
	 7: clkdivider = 10'd683;//E
	 8: clkdivider = 10'd645;//F
	 9: clkdivider = 10'd607;// F#/Gb
	10: clkdivider = 10'd573;//G
	11: clkdivider = 10'd541;// G#/Ab
	default: clkdivider = 10'd0;
endcase

reg [9:0] counter_note;
reg [7:0] counter_octave;
always @(posedge clk) counter_note <= counter_note==0 ? clkdivider : counter_note-10'd1;
always @(posedge clk) if(counter_note==0) counter_octave <= counter_octave==0 ? 8'd255 >> octave : counter_octave-8'd1;
always @(posedge clk) if(counter_note==0 && counter_octave==0 && fullnote!=0 && tone[21:18]!=0) speaker <= ~speaker;
endmodule


/////////////////////////////////////////////////////
module divide_by12(
	input [5:0] numerator,  // value to be divided by 12
	output reg [2:0] quotient, 
	output [3:0] remainder
);

reg [1:0] remainder3to2;
always @(numerator[5:2])
case(numerator[5:2])
	 0: begin quotient=0; remainder3to2=0; end
	 1: begin quotient=0; remainder3to2=1; end
	 2: begin quotient=0; remainder3to2=2; end
	 3: begin quotient=1; remainder3to2=0; end
	 4: begin quotient=1; remainder3to2=1; end
	 5: begin quotient=1; remainder3to2=2; end
	 6: begin quotient=2; remainder3to2=0; end
	 7: begin quotient=2; remainder3to2=1; end
	 8: begin quotient=2; remainder3to2=2; end
	 9: begin quotient=3; remainder3to2=0; end
	10: begin quotient=3; remainder3to2=1; end
	11: begin quotient=3; remainder3to2=2; end
	12: begin quotient=4; remainder3to2=0; end
	13: begin quotient=4; remainder3to2=1; end
	14: begin quotient=4; remainder3to2=2; end
	15: begin quotient=5; remainder3to2=0; end
endcase

assign remainder[1:0] = numerator[1:0];  // the first 2 bits are copied through
assign remainder[3:2] = remainder3to2;  // and the last 2 bits come from the case statement
endmodule
/////////////////////////////////////////////////////


module music_ROM(
	input clk,
	input [6:0] address,
	output reg [7:0] note
);

always @(posedge clk)
case(address)
	  0: note<= 7'd19; //E 
	  1: note<= 7'd19; 
	  2: note<= 7'd0; 
	  3: note<= 7'd19; //E
	  4: note<= 7'd19; 
	  5: note<= 7'd0; 
	  6: note<= 7'd19; //E
	  7: note<= 7'd19; 
	  8: note<= 7'd0; 
	  9: note<= 7'd15; //C
	 10: note<= 7'd15; 
	 11: note<= 7'd0; 
	 12: note<= 7'd19; //E
	 13: note<= 7'd19; 
	 14: note<= 7'd0; 
	 15: note<= 7'd22; //G
	 16: note<= 7'd22; 
	 17: note<= 7'd0; 
	 18: note<= 7'd0; 
	 19: note<= 7'd0; 
	 20: note<= 7'd0; 
	 21: note<= 7'd0; 
	 22: note<= 7'd0; 
	 23: note<= 7'd0; 
	 24: note<= 7'd10; //G
	 25: note<= 7'd10; 
	 26: note<= 7'd0; 
	 27: note<= 7'd0; 
	 28: note<= 7'd0; 
	 29: note<= 7'd0; 
	 30: note<= 7'd0; 
	 31: note<= 7'd0; 
	 32: note<= 7'd0; 
	 33: note<= 7'd27; //C
	 34: note<= 7'd27; 
	 35: note<= 7'd0; 
	 36: note<= 7'd0; 
	 37: note<= 7'd0; 
	 38: note<= 7'd22; //G
	 39: note<= 7'd22; 
	 40: note<= 7'd0; 
	 41: note<= 7'd0; 
	 42: note<= 7'd0; 
	 43: note<= 7'd19; //E
	 44: note<= 7'd19;
	 45: note<= 7'd0;
	 46: note<= 7'd0;
	 47: note<= 7'd24; //A
	 48: note<= 7'd24;
	 49: note<= 7'd0; 
	 50: note<= 7'd26; //B
	 51: note<= 7'd26; 
	 52: note<= 7'd0;
	 53: note<= 7'd25; //A#
	 54: note<= 7'd25;
	 55: note<= 7'd0;
	 56: note<= 7'd24; //A
	 57: note<= 7'd24;
	 58: note<= 7'd0;
	 59: note<= 7'd22; //G
	 60: note<= 7'd22;
	 61: note<= 7'd0;
	 62: note<= 7'd31; //E
	 63: note<= 7'd31;
	 64: note<= 7'd0;
	 65: note<= 7'd22; //G
	 66: note<= 7'd22;
	 67: note<= 7'd0;
	 68: note<= 7'd24; //A
	 69: note<= 7'd24;
	 70: note<= 7'd0;
	 71: note<= 7'd20; //F
	 72: note<= 7'd20;
	 73: note<= 7'd0;
	 74: note<= 7'd22; //G
	 75: note<= 7'd22;
	 76: note<= 7'd0;
	 77: note<= 7'd19; //E
	 78: note<= 7'd19;
	 79: note<= 7'd0;
	 80: note<= 7'd0;
	 81: note<= 7'd0;
	 82: note<= 7'd0;
	 83: note<= 7'd29; //D
	 84: note<= 7'd29;
	 85: note<= 7'd0;
	 86: note<= 7'd26; //B
	 87: note<= 7'd26;
	 88: note<= 7'd0;
	 89: note<= 7'd0;
	 90: note<= 7'd0;
	 91: note<= 7'd0;
	 92: note<= 7'd0;
	 93: note<= 7'd0;
	 94: note<= 7'd0;
	 95: note<= 7'd0;
	default: note <= 7'd0;
endcase
endmodule

/////////////////////////////////////////////////////
